package com.riskvis.entity;

// Generated May 12, 2014 11:45:38 PM by Hibernate Tools 4.0.0

import static javax.persistence.GenerationType.IDENTITY;

import java.math.BigDecimal;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.CascadeType;

/**
 * Placesrisks generated by hbm2java
 */
@Entity
@Table(name = "placesrisks", catalog = "test")
public class Placesrisks extends AbstractEntity implements java.io.Serializable {

	private static final long serialVersionUID = -2905975807433139365L;
	private Integer idrisks;
	private Places places;
	private String name;
	private String description;
	private BigDecimal riskFactor;
	private BigDecimal frequency;
	private String data;
	private BigDecimal cashCost;
	private Integer energyCost;
	private Set<TurnsHistoryHasPlacesrisks> turnsHistoryHasPlacesriskses = new HashSet<TurnsHistoryHasPlacesrisks>(
			0);
	private Set<InsurancesHasPlacesrisks> insurancesHasPlacesriskses = new HashSet<InsurancesHasPlacesrisks>(
			0);

	public Placesrisks() {
	}

	public Placesrisks(Places places, String name, BigDecimal riskFactor,
			BigDecimal frequency, BigDecimal cashCost, Integer energyCost) {
		this.places = places;
		this.name = name;
		this.riskFactor = riskFactor;
		this.frequency = frequency;
		this.cashCost = cashCost;
		this.energyCost = energyCost;
	}

	public Placesrisks(Places places, String name, String description,
			BigDecimal riskFactor, BigDecimal frequency, String data,
			BigDecimal cashCost, Integer energyCost,
			Set<TurnsHistoryHasPlacesrisks> turnsHistoryHasPlacesriskses,
			Set<InsurancesHasPlacesrisks> insurancesHasPlacesriskses) {
		this.places = places;
		this.name = name;
		this.description = description;
		this.riskFactor = riskFactor;
		this.frequency = frequency;
		this.data = data;
		this.cashCost = cashCost;
		this.energyCost = energyCost;
		this.turnsHistoryHasPlacesriskses = turnsHistoryHasPlacesriskses;
		this.insurancesHasPlacesriskses = insurancesHasPlacesriskses;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "idrisks", unique = true, nullable = false)
	public Integer getIdrisks() {
		return this.idrisks;
	}

	public void setIdrisks(Integer idrisks) {
		this.idrisks = idrisks;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "places_idplaces", nullable = false)
	public Places getPlaces() {
		return this.places;
	}

	public void setPlaces(Places places) {
		this.places = places;
	}

	@Column(name = "name", nullable = false, length = 45)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "description", length = 2048)
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Column(name = "risk_factor", precision = 10, scale = 5)
	public BigDecimal getRiskFactor() {
		return this.riskFactor;
	}

	public void setRiskFactor(BigDecimal riskFactor) {
		this.riskFactor = riskFactor;
	}

	@Column(name = "frequency", nullable = false, precision = 4)
	public BigDecimal getFrequency() {
		return this.frequency;
	}

	public void setFrequency(BigDecimal frequency) {
		this.frequency = frequency;
	}

	@Column(name = "data", length = 10240)
	public String getData() {
		return this.data;
	}

	public void setData(String data) {
		this.data = data;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "placesrisks")
	@Cascade({ CascadeType.DELETE })
	public Set<InsurancesHasPlacesrisks> getInsurancesHasPlacesriskses() {
		return this.insurancesHasPlacesriskses;
	}

	public void setInsurancesHasPlacesriskses(
			Set<InsurancesHasPlacesrisks> insurancesHasPlacesriskses) {
		this.insurancesHasPlacesriskses = insurancesHasPlacesriskses;
	}

	@Column(name = "cash_cost", nullable = false, precision = 10, scale = 2)
	public BigDecimal getCashCost() {
		return cashCost;
	}

	public void setCashCost(BigDecimal cashCost) {
		this.cashCost = cashCost;
	}

	@Column(name = "energy_cost", nullable = false)
	public Integer getEnergyCost() {
		return energyCost;
	}

	public void setEnergyCost(Integer energyCost) {
		this.energyCost = energyCost;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "placesrisks")
	@Cascade({ CascadeType.DELETE })
	public Set<TurnsHistoryHasPlacesrisks> getTurnsHistoryHasPlacesriskses() {
		return this.turnsHistoryHasPlacesriskses;
	}

	public void setTurnsHistoryHasPlacesriskses(
			Set<TurnsHistoryHasPlacesrisks> turnsHistoryHasPlacesriskses) {
		this.turnsHistoryHasPlacesriskses = turnsHistoryHasPlacesriskses;
	}

}
