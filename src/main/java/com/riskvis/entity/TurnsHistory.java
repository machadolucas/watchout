package com.riskvis.entity;

// Generated Sep 29, 2014 10:02:36 PM by Hibernate Tools 4.0.0

import java.util.HashSet;
import java.util.Set;

import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.CascadeType;

/**
 * TurnsHistory generated by hbm2java
 */
@Entity
@Table(name = "turns_history", catalog = "test")
public class TurnsHistory extends AbstractEntity implements
		java.io.Serializable {

	private static final long serialVersionUID = 8846498091267297817L;
	private TurnsHistoryId id;
	private PlayersHasQuests playersHasQuests;
	private PlacesHasTransports placesHasTransports;
	private Set<TurnsHistoryHasPlacesrisks> turnsHistoryHasPlacesriskses = new HashSet<TurnsHistoryHasPlacesrisks>(
			0);
	private Set<TurnsHistoryHasTransportationrisks> turnsHistoryHasTransportationriskses = new HashSet<TurnsHistoryHasTransportationrisks>(
			0);

	public TurnsHistory() {
	}

	public TurnsHistory(TurnsHistoryId id, PlayersHasQuests playersHasQuests,
			PlacesHasTransports placesHasTransports) {
		this.id = id;
		this.playersHasQuests = playersHasQuests;
		this.placesHasTransports = placesHasTransports;
	}

	public TurnsHistory(
			TurnsHistoryId id,
			PlayersHasQuests playersHasQuests,
			PlacesHasTransports placesHasTransports,
			Set<TurnsHistoryHasPlacesrisks> turnsHistoryHasPlacesriskses,
			Set<TurnsHistoryHasTransportationrisks> turnsHistoryHasTransportationriskses) {
		this.id = id;
		this.playersHasQuests = playersHasQuests;
		this.placesHasTransports = placesHasTransports;
		this.turnsHistoryHasPlacesriskses = turnsHistoryHasPlacesriskses;
		this.turnsHistoryHasTransportationriskses = turnsHistoryHasTransportationriskses;
	}

	@EmbeddedId
	@AttributeOverrides({
			@AttributeOverride(name = "playersHasQuestsPlayersIdplayers", column = @Column(name = "players_has_quests_players_idplayers", nullable = false)),
			@AttributeOverride(name = "playersHasQuestsQuestsIdquests", column = @Column(name = "players_has_quests_quests_idquests", nullable = false)),
			@AttributeOverride(name = "placesHasTransportsPlacesOrigin", column = @Column(name = "places_has_transports_places_origin", nullable = false)),
			@AttributeOverride(name = "placesHasTransportsTransportation", column = @Column(name = "places_has_transports_transportation", nullable = false)),
			@AttributeOverride(name = "placesHasTransportsPlacesDestination", column = @Column(name = "places_has_transports_places_destination", nullable = false)) })
	public TurnsHistoryId getId() {
		return this.id;
	}

	public void setId(TurnsHistoryId id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns({
			@JoinColumn(name = "players_has_quests_players_idplayers", referencedColumnName = "players_idplayers", nullable = false, insertable = false, updatable = false),
			@JoinColumn(name = "players_has_quests_quests_idquests", referencedColumnName = "quests_idquests", nullable = false, insertable = false, updatable = false) })
	public PlayersHasQuests getPlayersHasQuests() {
		return this.playersHasQuests;
	}

	public void setPlayersHasQuests(PlayersHasQuests playersHasQuests) {
		this.playersHasQuests = playersHasQuests;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumns({
			@JoinColumn(name = "places_has_transports_places_origin", referencedColumnName = "places_origin", nullable = false, insertable = false, updatable = false),
			@JoinColumn(name = "places_has_transports_transportation", referencedColumnName = "transportation", nullable = false, insertable = false, updatable = false),
			@JoinColumn(name = "places_has_transports_places_destination", referencedColumnName = "places_destination", nullable = false, insertable = false, updatable = false) })
	public PlacesHasTransports getPlacesHasTransports() {
		return this.placesHasTransports;
	}

	public void setPlacesHasTransports(PlacesHasTransports placesHasTransports) {
		this.placesHasTransports = placesHasTransports;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "turnsHistory")
	@Cascade({ CascadeType.DELETE })
	public Set<TurnsHistoryHasPlacesrisks> getTurnsHistoryHasPlacesriskses() {
		return this.turnsHistoryHasPlacesriskses;
	}

	public void setTurnsHistoryHasPlacesriskses(
			Set<TurnsHistoryHasPlacesrisks> turnsHistoryHasPlacesriskses) {
		this.turnsHistoryHasPlacesriskses = turnsHistoryHasPlacesriskses;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "turnsHistory")
	@Cascade({ CascadeType.DELETE })
	public Set<TurnsHistoryHasTransportationrisks> getTurnsHistoryHasTransportationriskses() {
		return this.turnsHistoryHasTransportationriskses;
	}

	public void setTurnsHistoryHasTransportationriskses(
			Set<TurnsHistoryHasTransportationrisks> turnsHistoryHasTransportationriskses) {
		this.turnsHistoryHasTransportationriskses = turnsHistoryHasTransportationriskses;
	}

}
