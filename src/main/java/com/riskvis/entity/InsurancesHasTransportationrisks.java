package com.riskvis.entity;

// Generated May 12, 2014 11:45:38 PM by Hibernate Tools 4.0.0

import java.math.BigDecimal;

import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

/**
 * InsurancesHasTransportationrisks generated by hbm2java
 */
@Entity
@Table(name = "insurances_has_transportationrisks", catalog = "test")
public class InsurancesHasTransportationrisks extends AbstractEntity implements
		java.io.Serializable {

	private static final long serialVersionUID = 5177323312753631617L;
	private InsurancesHasTransportationrisksId id;
	private Transportationrisks transportationrisks;
	private Insurances insurances;
	private BigDecimal cover;

	public InsurancesHasTransportationrisks() {
	}

	public InsurancesHasTransportationrisks(
			InsurancesHasTransportationrisksId id,
			Transportationrisks transportationrisks, Insurances insurances,
			BigDecimal cover) {
		this.id = id;
		this.transportationrisks = transportationrisks;
		this.insurances = insurances;
		this.cover = cover;
	}

	@EmbeddedId
	@AttributeOverrides({
			@AttributeOverride(name = "insurancesIdinsurances", column = @Column(name = "insurances_idinsurances", nullable = false)),
			@AttributeOverride(name = "risksIdrisks", column = @Column(name = "risks_idrisks", nullable = false)) })
	public InsurancesHasTransportationrisksId getId() {
		return this.id;
	}

	public void setId(InsurancesHasTransportationrisksId id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "risks_idrisks", nullable = false, insertable = false, updatable = false)
	public Transportationrisks getTransportationrisks() {
		return this.transportationrisks;
	}

	public void setTransportationrisks(Transportationrisks transportationrisks) {
		this.transportationrisks = transportationrisks;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "insurances_idinsurances", nullable = false, insertable = false, updatable = false)
	public Insurances getInsurances() {
		return this.insurances;
	}

	public void setInsurances(Insurances insurances) {
		this.insurances = insurances;
	}

	@Column(name = "cover", nullable = false, precision = 10)
	public BigDecimal getCover() {
		return this.cover;
	}

	public void setCover(BigDecimal cover) {
		this.cover = cover;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		InsurancesHasTransportationrisks other = (InsurancesHasTransportationrisks) obj;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		return true;
	}

}
