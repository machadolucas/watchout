package com.riskvis.entity;

// Generated May 12, 2014 11:45:38 PM by Hibernate Tools 4.0.0

import static javax.persistence.GenerationType.IDENTITY;

import java.math.BigDecimal;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.CascadeType;

/**
 * Players generated by hbm2java
 */
@Entity
@Table(name = "players", catalog = "test", uniqueConstraints = {
		@UniqueConstraint(columnNames = "email"),
		@UniqueConstraint(columnNames = "name") })
public class Players extends AbstractEntity implements java.io.Serializable {

	private static final long serialVersionUID = -732050809963609497L;
	private Integer idplayers;
	private String name;
	private String email;
	private String password;
	private BigDecimal cash;
	private int energy;
	private Set<PlayersHasQuests> playersHasQuestses = new HashSet<PlayersHasQuests>(
			0);
	private Set<Insurances> insuranceses = new HashSet<Insurances>(0);

	public Players() {
	}

	public Players(String name, String email, String password, BigDecimal cash,
			int energy) {
		this.name = name;
		this.email = email;
		this.password = password;
		this.cash = cash;
		this.energy = energy;
	}

	public Players(String name, String email, String password, BigDecimal cash,
			int energy, Set<PlayersHasQuests> playersHasQuestses,
			Set<Insurances> insuranceses) {
		this.name = name;
		this.email = email;
		this.password = password;
		this.cash = cash;
		this.energy = energy;
		this.playersHasQuestses = playersHasQuestses;
		this.insuranceses = insuranceses;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "idplayers", unique = true, nullable = false)
	public Integer getIdplayers() {
		return this.idplayers;
	}

	public void setIdplayers(Integer idplayers) {
		this.idplayers = idplayers;
	}

	@Column(name = "name", unique = true, nullable = false, length = 64)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "email", unique = true, nullable = false, length = 64)
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Column(name = "password", nullable = false, length = 128)
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@Column(name = "cash", nullable = false, precision = 10)
	public BigDecimal getCash() {
		return this.cash;
	}

	public void setCash(BigDecimal cash) {
		this.cash = cash;
	}

	@Column(name = "energy", nullable = false)
	public int getEnergy() {
		return this.energy;
	}

	public void setEnergy(int energy) {
		this.energy = energy;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "players")
	@Cascade({ CascadeType.DELETE })
	public Set<PlayersHasQuests> getPlayersHasQuestses() {
		return this.playersHasQuestses;
	}

	public void setPlayersHasQuestses(Set<PlayersHasQuests> playersHasQuestses) {
		this.playersHasQuestses = playersHasQuestses;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "players_has_insurances", catalog = "test", joinColumns = { @JoinColumn(name = "players_idplayers", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "insurances_idinsurances", nullable = false, updatable = false) })
	public Set<Insurances> getInsuranceses() {
		return this.insuranceses;
	}

	public void setInsuranceses(Set<Insurances> insuranceses) {
		this.insuranceses = insuranceses;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((idplayers == null) ? 0 : idplayers.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Players other = (Players) obj;
		if (idplayers == null) {
			if (other.idplayers != null)
				return false;
		} else if (!idplayers.equals(other.idplayers))
			return false;
		return true;
	}

}
